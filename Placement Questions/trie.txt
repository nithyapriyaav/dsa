#include<iostream>
#include<bits/stdc++.h>
using namespace std;
struct TrieNode
{
    TrieNode *children[26];
    int end;
    int count;
};
TrieNode* getNode()
{
    TrieNode *new1=new TrieNode();
    new1->end=0;
    new1->count=0;
    for(int i=0;i<26;i++)
    {
        new1->children[i]=NULL;
    }
    return new1;
}
void insert(TrieNode *root,string word)
{
    TrieNode *curr=root;
    int index;
    for(int i=0;word[i]!='\0';i++)
    {
        index=word[i]-'a';
        if(curr->children[index]==NULL)
        {
            curr->children[index]=getNode();
        }
        curr->children[index]->count+=1;
        curr=curr->children[index];
    }
    curr->end+=1;
}
bool search(TrieNode *root,string word)
{
    TrieNode *curr=root;
    int index;
    for(int i=0;word[i]!='\0';i++)
    {
        index=word[i]-'a';
        if(curr->children[index]==NULL)
        {
            return false;
        }
        curr=curr->children[index];
    }
    return (curr->end>0);
}
void removee(TrieNode *root,string word)
{
    TrieNode *curr=root;
    int index;
    for(int i=0;word[i]!='\0';i++)
    {
        index=word[i]-'a';
        if(curr->children[index]==NULL)
        {
            break;
        }
        curr=curr->children[index];
    }
    curr->end-=1;
}
bool startsWith(TrieNode *root,string word)
{
    TrieNode *curr=root;
    int index;
    for(int i=0;word[i]!='\0';i++)
    {
        index=word[i]-'a';
        if(curr->children[index]==NULL)
        {
            return false;
        }
        curr=curr->children[index];
    }
    // cout<<curr->count<<'\n';
    return (curr->count>0);
}
void display(TrieNode *root,char str[],int level)
{
    if(root->end>0)
    {
        str[level] = '\0';
        cout<<str<<endl;
    }
    for(int i = 0; i <26; i++)
    {
        if (root->children[i])
        {
            str[level] = i + 'a';
            display(root->children[i], str, level + 1);
        }
    }
}
int main()
{
    string keys[] = {"the", "tta", "these",
                    "answer", "any", "by",
                     "bye", "their" ,"a","a"};
    int n = sizeof(keys)/sizeof(keys[0]);
    TrieNode *root=getNode();
    
    // Construct trie
    for (int i = 0; i < n; i++)
        insert(root, keys[i]);
 
    // Search for different keys
    search(root, "the")? cout << "Yes\n" :
                         cout << "No\n";
           
    // Remove word
    removee(root,"these");
    
    search(root, "these")? cout << "Yes\n" :
                           cout << "No\n";
                         
    // StartsWith
    startsWith(root,"t")? cout << "Yes\n" :
                         cout << "No\n";
                         
    // Display trie
    int level=0;
    char str[20];
    cout<<"Content of Trie:\n";
    display(root,str,level);
}